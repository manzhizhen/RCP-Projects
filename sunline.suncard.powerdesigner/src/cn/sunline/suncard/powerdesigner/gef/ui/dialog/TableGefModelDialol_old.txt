/* 文件名：     TableModelDialog.java
 * 版权：          Copyright 2002-2011 Sunline Tech. Co. Ltd. All Rights Reserved.
 * 描述：
 * 修改人：     Manzhizhen
 * 修改时间：2012-9-8
 * 修改内容：
 */
package cn.sunline.suncard.powerdesigner.gef.ui.dialog;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.gef.commands.Command;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.dialogs.TitleAreaDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.dnd.Clipboard;
import org.eclipse.swt.dnd.DND;
import org.eclipse.swt.dnd.TextTransfer;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;

import cn.sunline.suncard.powerdesigner.command.UpdateTableModelCommand;
import cn.sunline.suncard.powerdesigner.db.DataTypeModel;
import cn.sunline.suncard.powerdesigner.db.DatabaseGeneration;
import cn.sunline.suncard.powerdesigner.db.DatabaseManager;
import cn.sunline.suncard.powerdesigner.gef.model.TableGefModel;
import cn.sunline.suncard.powerdesigner.listener.ColumnModelDrogTargetListener;
import cn.sunline.suncard.powerdesigner.listener.ColumnModelDropTargetListener;
import cn.sunline.suncard.powerdesigner.model.ColumnModel;
import cn.sunline.suncard.powerdesigner.model.FileModel;
import cn.sunline.suncard.powerdesigner.model.PhysicalDiagramModel;
import cn.sunline.suncard.powerdesigner.model.TableModel;
import cn.sunline.suncard.powerdesigner.provider.TableColumnLabelProvider;
import cn.sunline.suncard.powerdesigner.resource.DmConstants;
import cn.sunline.suncard.powerdesigner.resource.IDmImageKey;
import cn.sunline.suncard.powerdesigner.transfer.ColumnModelTransfer;
import cn.sunline.suncard.sde.bs.log.Log;
import cn.sunline.suncard.sde.bs.log.LogManager;
import cn.sunline.suncard.sde.bs.resource.CacheImage;
import cn.sunline.suncard.sde.bs.util.I18nUtil;

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Table;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.CheckboxCellEditor;
import org.eclipse.jface.viewers.ComboBoxCellEditor;
import org.eclipse.jface.viewers.DoubleClickEvent;
import org.eclipse.jface.viewers.ICellModifier;
import org.eclipse.jface.viewers.IDoubleClickListener;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.ListViewer;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TextCellEditor;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.ui.PlatformUI;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.window.Window;
import org.eclipse.wb.swt.SWTResourceManager;

/**
 * 在GEF界面上双击表格图形弹出的对话框
 * 
 * @author Manzhizhen
 * @version 1.0, 2012-9-8
 * @see
 * @since 1.0
 */
public class TableGefModelDialog extends TitleAreaDialog {
	private Composite composite;

	private TableGefModel tableGefModel;
	private TableModel tableModel;
	private TableModel cloneTableModel; // 便于TableModel的还原

	private UpdateTableModelCommand command;

	// 一个TableModel只能打开一个对话框
	private static Map<TableModel, TableGefModelDialog> tableDialogMap = new HashMap<TableModel, TableGefModelDialog>();

	private CTabFolder folder; // 文件夹选项卡
	private CTabItem tableItem; // Table属性表情
	private CTabItem columnItem; // 表格列属性标签
	private CTabItem previewItem;
	private Text nameText;
	private Label lblNewLabel_1;
	private Text descText;
	private Label lblNewLabel_2;
	private Text noteText;
	private Table columnTable;
	private TableColumn nameColumn;
	private TableViewerColumn tableViewerColumn;
	private TableColumn descColumn;
	private TableViewerColumn tableViewerColumn_1;
	private TableColumn typeColumn;
	private TableViewerColumn tableViewerColumn_2;
	private TableColumn lengthColumn;
	private TableViewerColumn tableViewerColumn_3;
	private TableColumn precisionColumn;
	private TableViewerColumn tableViewerColumn_4;
	private TableColumn pColumn;
	private TableViewerColumn tableViewerColumn_5;
	private TableColumn fColumn;
	private TableViewerColumn tableViewerColumn_6;
	private TableColumn mColumn;
	private TableViewerColumn tableViewerColumn_7;
	private Button downButton;
	private Button upButton;
	private Button addButton;
	private Button delButton;
	private Button copButton;
	private Button cutButton;
	private Button pasButton;

	private TableViewer columnTableViewer;

	private List<ColumnModel> columnModelList = new ArrayList<ColumnModel>();

	private Log logger = LogManager.getLogger(TableGefModelDialog.class
			.getName());

	private List<DataTypeModel> dataTypeList = new ArrayList<DataTypeModel>(); // 记录该数据库所支持的数据类型List

	private TableColumn numColumn;

	private TableViewerColumn tableViewerColumn_0;

	private DataTypeModel undefinedDataTypeModel; // 未定义数据类型（即用户没有选择数据类型时显示的数据类型）;
	private Text previewText;

	private org.eclipse.swt.widgets.List modelLabelList;

	private ListViewer modelLabelListViewer;

	private Button addModelLabelButton;

	private Button removeModelLabelButton;
	private Text modelLabelText;

	public TableGefModelDialog(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.CLOSE | SWT.MIN | SWT.MAX | SWT.RESIZE);
	}

	@Override
	protected void configureShell(Shell newShell) {
		// 表格模型对话框
		newShell.setText(I18nUtil.getMessage("TABLEMODEL_DIALOG"));
		setDefaultImage(CacheImage.getCacheImage().getImage(
				DmConstants.PD_APPLICATION_ID, IDmImageKey.TABLE_16));
		super.configureShell(newShell);
	}

	@Override
	protected Point getInitialSize() {
		return new Point(731, 600);
	}

	@Override
	protected Control createDialogArea(Composite parent) {
		// 表格模型属性
		setTitle(I18nUtil.getMessage("TABLEMODEL_ATTRI"));
		setMessage(I18nUtil.getMessage("TABLEMODEL_ATTRI"));
		setTitleImage(CacheImage.getCacheImage().getImage(
				DmConstants.PD_APPLICATION_ID, IDmImageKey.TABLE_64));

		Control control = super.createDialogArea(parent);

		composite = new Composite((Composite) control, SWT.NONE);
		composite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1,
				1));
		composite.setLayout(new FormLayout());

		try {
			createControl();
			initControlData();
			createEvent();
		} catch (CloneNotSupportedException e) {
			logger.error("克隆TableModel失败！" + e.getMessage());
			setErrorMessage("克隆TableModel失败！" + e.getMessage());
			e.printStackTrace();
		}

		return control;
	}

	@Override
	public int open() {
		TableGefModelDialog tableGefModelDialog = getTableDialogMap()
				.get(tableModel);
		if (tableGefModelDialog != null) {
			tableGefModelDialog.getShell().setMinimized(false);
			return Window.OK;
		} else {
			getTableDialogMap().put(tableModel, this);
			return super.open();
		}
	}

	@Override
	public boolean close() {
		getTableDialogMap().remove(tableModel);
		
		// 关闭与其相关的ColumnPropertiesDialog
		List<ColumnModel> columnModelList = tableModel.getColumnList();
		for(ColumnModel columnModel : columnModelList) {
			ColumnPropertiesDialog dialog = ColumnPropertiesDialog.getColumnDialogMap().get(columnModel);
			if(dialog != null) {
				dialog.close();
			}
		}
		
		return super.close();
	}

	private void createControl() throws CloneNotSupportedException {
		folder = new CTabFolder(composite, SWT.NONE | SWT.BORDER);

		// 设置标签栏的高度
		folder.setTabHeight(20);
		folder.marginHeight = 2;
		folder.marginWidth = 2;
		folder.setMaximizeVisible(true);
		folder.setMinimizeVisible(true);

		// 设置圆角
		folder.setSimple(false);

		folder.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (e.getSource() instanceof CTabFolder) {
					CTabFolder cTabFolder = ((CTabFolder) e.getSource());
					if ("预览".equals(cTabFolder.getSelection().getText())) {
						// try {
						initPreviewData();
						// } catch (CloneNotSupportedException e1) {
						// logger.error("克隆TableModel失败！" + e1.getMessage());
						// e1.printStackTrace();
						// }
					}

				}
				super.widgetSelected(e);
			}
		});

		FormData folderData = new FormData();
		folderData.right = new FormAttachment(100, 0);
		folderData.top = new FormAttachment(0, 0);
		folderData.left = new FormAttachment(0, 0);
		folderData.bottom = new FormAttachment(100, 0);
		folder.setLayoutData(folderData);
		folder.setLayout(new FormLayout());

		createTableItem();
		createColumnItem();
		createPreviewItem();
	}

	/**
	 * 创建预览标签
	 */
	private void createPreviewItem() {
		previewItem = new CTabItem(folder, SWT.NONE);
		previewItem.setText("预览");
		Image previewItemImage = CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.PREVIEW_ITEM_16);
		previewItem.setImage(previewItemImage);

		Composite previewComposite = new Composite(folder, SWT.NONE);
		previewComposite.setLayout(new FormLayout());
		previewItem.setControl(previewComposite);

		previewText = new Text(previewComposite, SWT.BORDER | SWT.READ_ONLY
				| SWT.WRAP | SWT.MULTI);
		previewText.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		FormData fd_previewText = new FormData();
		fd_previewText.top = new FormAttachment(0, 0);
		fd_previewText.bottom = new FormAttachment(100, 0);
		fd_previewText.left = new FormAttachment(0, 0);
		fd_previewText.right = new FormAttachment(100, 0);
		previewText.setLayoutData(fd_previewText);

	}

	/**
	 * 创建列属性标签
	 */
	private void createColumnItem() {
		columnItem = new CTabItem(folder, SWT.NONE);
		columnItem.setText("列属性");
		Image columnItemImage = CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_ITEM_16);
		columnItem.setImage(columnItemImage);

		Composite columnComposite = new Composite(folder, SWT.NONE);
		columnComposite.setLayout(new FormLayout());
		columnItem.setControl(columnComposite);

		delButton = new Button(columnComposite, SWT.NONE);
		FormData fd_delButton = new FormData();
		fd_delButton.width = 30;
		fd_delButton.top = new FormAttachment(0, 0);
		fd_delButton.right = new FormAttachment(100, -10);
		delButton.setLayoutData(fd_delButton);
		// delButton.setText("Del");
		delButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_DEL));
		delButton.setToolTipText("删除");

		pasButton = new Button(columnComposite, SWT.NONE);
		FormData fd_pasButton = new FormData();
		fd_pasButton.width = 30;
		fd_pasButton.bottom = new FormAttachment(delButton, 0, SWT.BOTTOM);
		fd_pasButton.right = new FormAttachment(delButton, -6);
		pasButton.setLayoutData(fd_pasButton);
		// pasButton.setText("Pas");
		pasButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_PASTE));
		pasButton.setToolTipText("粘贴");

		copButton = new Button(columnComposite, SWT.NONE);
		FormData fd_copButton = new FormData();
		fd_copButton.width = 30;
		fd_copButton.bottom = new FormAttachment(delButton, 0, SWT.BOTTOM);
		fd_copButton.right = new FormAttachment(pasButton, -6);
		copButton.setLayoutData(fd_copButton);
		// copButton.setText("Cop");
		copButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_COPY));
		copButton.setToolTipText("复制");

		cutButton = new Button(columnComposite, SWT.NONE);
		FormData fd_cutButton = new FormData();
		fd_cutButton.width = 30;
		fd_cutButton.top = new FormAttachment(delButton, 0, SWT.TOP);
		fd_cutButton.right = new FormAttachment(copButton, -6);
		cutButton.setLayoutData(fd_cutButton);
		// cutButton.setText("Cut");
		cutButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_CUT));
		cutButton.setToolTipText("剪切");

		Label label = new Label(columnComposite, SWT.SEPARATOR | SWT.VERTICAL);
		FormData fd_label = new FormData();
		fd_label.right = new FormAttachment(cutButton, -5, SWT.LEFT);
		fd_label.top = new FormAttachment(cutButton, 0, SWT.TOP);
		fd_label.bottom = new FormAttachment(cutButton, 0, SWT.BOTTOM);
		fd_label.width = 1;
		label.setLayoutData(fd_label);

		downButton = new Button(columnComposite, SWT.NONE);
		FormData fd_downButton = new FormData();
		fd_downButton.width = 30;
		fd_downButton.top = new FormAttachment(delButton, 0, SWT.TOP);
		fd_downButton.right = new FormAttachment(label, -6);
		downButton.setLayoutData(fd_downButton);
		// downButton.setText("↓");
		downButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_DOWN));
		downButton.setToolTipText("下移一行");

		upButton = new Button(columnComposite, SWT.NONE);
		FormData fd_upButton = new FormData();
		fd_upButton.width = 30;
		fd_upButton.top = new FormAttachment(delButton, 0, SWT.TOP);
		fd_upButton.right = new FormAttachment(downButton, -6);
		upButton.setLayoutData(fd_upButton);
		// upButton.setText("↑");
		upButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_UP));
		upButton.setToolTipText("上移一行");

		addButton = new Button(columnComposite, SWT.NONE);
		FormData fd_addButton = new FormData();
		fd_addButton.width = 30;
		fd_addButton.top = new FormAttachment(delButton, 0, SWT.TOP);
		fd_addButton.right = new FormAttachment(upButton, -6);
		addButton.setLayoutData(fd_addButton);
		// addButton.setText("Add");
		addButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.A_NEW_IMAGE));
		addButton.setToolTipText("插入一行");

		columnTableViewer = new TableViewer(columnComposite, SWT.BORDER
				| SWT.FULL_SELECTION | SWT.MULTI);
		columnTable = columnTableViewer.getTable();
		columnTable.setTouchEnabled(true);
		FormData fd_columnTable = new FormData();
		fd_columnTable.top = new FormAttachment(delButton, 6);
		fd_columnTable.right = new FormAttachment(delButton, 0, SWT.RIGHT);
		fd_columnTable.left = new FormAttachment(0, 10);
		fd_columnTable.bottom = new FormAttachment(100, -10);
		columnTable.setLayoutData(fd_columnTable);

		columnTable.setLinesVisible(true);
		columnTable.setHeaderVisible(true);

		tableViewerColumn_0 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		numColumn = tableViewerColumn_0.getColumn();
		numColumn.setWidth(50);
		numColumn.setText("");

		tableViewerColumn = new TableViewerColumn(columnTableViewer, SWT.NONE);
		nameColumn = tableViewerColumn.getColumn();
		nameColumn.setWidth(150);
		nameColumn.setText("列名称");

		tableViewerColumn_1 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		descColumn = tableViewerColumn_1.getColumn();
		descColumn.setWidth(150);
		descColumn.setText("列描述");

		tableViewerColumn_2 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		typeColumn = tableViewerColumn_2.getColumn();
		typeColumn.setWidth(130);
		typeColumn.setText("数据类型");

		tableViewerColumn_3 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		lengthColumn = tableViewerColumn_3.getColumn();
		lengthColumn.setWidth(60);
		lengthColumn.setText("长度");

		tableViewerColumn_4 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		precisionColumn = tableViewerColumn_4.getColumn();
		precisionColumn.setWidth(60);
		precisionColumn.setText("精度");

		tableViewerColumn_5 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		pColumn = tableViewerColumn_5.getColumn();
		pColumn.setWidth(25);
		pColumn.setText("P");

		tableViewerColumn_6 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		fColumn = tableViewerColumn_6.getColumn();
		fColumn.setWidth(25);
		fColumn.setText("F");

		tableViewerColumn_7 = new TableViewerColumn(columnTableViewer, SWT.NONE);
		mColumn = tableViewerColumn_7.getColumn();
		mColumn.setWidth(25);
		mColumn.setText("M");

	}

	/**
	 * 创建表格属性标签
	 */
	private void createTableItem() {
		tableItem = new CTabItem(folder, SWT.NONE);
		tableItem.setText("表属性");
		Image tableItemImage = CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.TABLE_ITEM_16);
		tableItem.setImage(tableItemImage);

		Composite tableComposite = new Composite(folder, SWT.NONE);
		tableComposite.setLayout(new FormLayout());
		tableItem.setControl(tableComposite);

		Label lblNewLabel = new Label(tableComposite, SWT.NONE);
		FormData fd_lblNewLabel = new FormData();
		fd_lblNewLabel.top = new FormAttachment(0, 10);
		fd_lblNewLabel.left = new FormAttachment(0, 10);
		lblNewLabel.setLayoutData(fd_lblNewLabel);
		lblNewLabel.setText("表格名称:");

		nameText = new Text(tableComposite, SWT.BORDER);
		FormData fd_nameText = new FormData();
		fd_nameText.top = new FormAttachment(lblNewLabel, -3, SWT.TOP);
		fd_nameText.left = new FormAttachment(lblNewLabel, 6);
		fd_nameText.right = new FormAttachment(100, -10);
		nameText.setLayoutData(fd_nameText);

		lblNewLabel_1 = new Label(tableComposite, SWT.NONE);
		FormData fd_lblNewLabel_1 = new FormData();
		fd_lblNewLabel_1.top = new FormAttachment(nameText, 14);
		fd_lblNewLabel_1.left = new FormAttachment(lblNewLabel, 0, SWT.LEFT);
		lblNewLabel_1.setLayoutData(fd_lblNewLabel_1);
		lblNewLabel_1.setText("表格描述:");

		descText = new Text(tableComposite, SWT.BORDER);
		FormData fd_descText = new FormData();
		fd_descText.top = new FormAttachment(lblNewLabel_1, -3, SWT.TOP);
		fd_descText.left = new FormAttachment(nameText, 0, SWT.LEFT);
		fd_descText.right = new FormAttachment(100, -10);
		descText.setLayoutData(fd_descText);

		lblNewLabel_2 = new Label(tableComposite, SWT.NONE);
		FormData fd_lblNewLabel_2 = new FormData();
		fd_lblNewLabel_2.top = new FormAttachment(lblNewLabel_1, 18);
		fd_lblNewLabel_2.right = new FormAttachment(lblNewLabel, 0, SWT.RIGHT);
		lblNewLabel_2.setLayoutData(fd_lblNewLabel_2);
		lblNewLabel_2.setText("备注:");

		noteText = new Text(tableComposite, SWT.BORDER | SWT.WRAP | SWT.MULTI);
		noteText.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		FormData fd_noteText = new FormData();
		fd_noteText.top = new FormAttachment(lblNewLabel_2, -3, SWT.TOP);
		fd_noteText.left = new FormAttachment(nameText, 0, SWT.LEFT);
		fd_noteText.right = new FormAttachment(100, -10);
		fd_noteText.bottom = new FormAttachment(100, -150);
		noteText.setLayoutData(fd_noteText);

		modelLabelList = new org.eclipse.swt.widgets.List(tableComposite,
				SWT.BORDER | SWT.V_SCROLL | SWT.MULTI);
		modelLabelListViewer = new ListViewer(modelLabelList);
		FormData fd_modelLabelList = new FormData();
		fd_modelLabelList.right = new FormAttachment(100, -100);
		fd_modelLabelList.bottom = new FormAttachment(100, -5);
		fd_modelLabelList.top = new FormAttachment(noteText, 6);
		fd_modelLabelList.left = new FormAttachment(nameText, 0, SWT.LEFT);
		modelLabelList.setLayoutData(fd_modelLabelList);

		Label lblNewLabel_3 = new Label(tableComposite, SWT.NONE);
		FormData fd_lblNewLabel_3 = new FormData();
		fd_lblNewLabel_3.top = new FormAttachment(noteText, 6);
		fd_lblNewLabel_3.right = new FormAttachment(lblNewLabel, 0, SWT.RIGHT);
		lblNewLabel_3.setLayoutData(fd_lblNewLabel_3);
		lblNewLabel_3.setText("模块标签:");

		addModelLabelButton = new Button(tableComposite, SWT.NONE);
		FormData fd_addModelLabelButton = new FormData();
		fd_addModelLabelButton.right = new FormAttachment(100, -32);
		fd_addModelLabelButton.width = 30;
		addModelLabelButton.setLayoutData(fd_addModelLabelButton);
		addModelLabelButton.setText("");
		addModelLabelButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.ADD_LABEL_16));

		removeModelLabelButton = new Button(tableComposite, SWT.NONE);
		removeModelLabelButton.setText("");
		FormData fd_removeModelLabelButton = new FormData();
		fd_removeModelLabelButton.top = new FormAttachment(addModelLabelButton,
				0, SWT.TOP);
		fd_removeModelLabelButton.left = new FormAttachment(modelLabelList, 6);
		fd_removeModelLabelButton.width = 30;
		removeModelLabelButton.setLayoutData(fd_removeModelLabelButton);
		removeModelLabelButton.setImage(CacheImage.getCacheImage().getImage(
				DmConstants.APPLICATION_ID, IDmImageKey.COLUMN_DEL));

		modelLabelText = new Text(tableComposite, SWT.BORDER);
		fd_addModelLabelButton.top = new FormAttachment(modelLabelText, 6);
		FormData fd_modelLabelText = new FormData();
		fd_modelLabelText.right = new FormAttachment(100, -10);
		fd_modelLabelText.top = new FormAttachment(noteText, 6);
		fd_modelLabelText.left = new FormAttachment(modelLabelList, 6);
		modelLabelText.setLayoutData(fd_modelLabelText);
	}

	private void initControlData() throws CloneNotSupportedException {
		if (tableModel == null) {
			// 表模型为空，无法初始化数据！
			setErrorMessage(I18nUtil.getMessage("TABLEMODEL_IS_EMPTY_CAN_NOT_INIT_DATA"));
			MessageDialog.openError(getShell(), I18nUtil.getMessage("MESSAGE"),
					I18nUtil.getMessage("TABLEMODEL_IS_EMPTY_CAN_NOT_INIT_DATA"));
			return;
		}

		cloneTableModel = tableModel.clone();
		// 为了实现sql预览，需要设置这个
		cloneTableModel.setLineModelList(tableModel.getLineModelList());

		getShell().setText(I18nUtil.getMessage("TABLEMODEL_ATTRI") + " - " + tableModel.getTableDesc());

		initColumnItemData();
		initTableItemData();
		// 初始化预览标签中的数据
		initPreviewData();
	}

	private void initPreviewData() {
		StringBuffer previewStr = new StringBuffer();
		if(DatabaseGeneration.isTableDrop()) {
			previewStr.append(DatabaseManager.getSqlDropTableModel(cloneTableModel) + "\r\n\r\n");
		}
		
		if(DatabaseGeneration.isTableCreate()) {
			previewStr.append(DatabaseManager
						.getSqlCreateTableAndPrimaryKeyModel(cloneTableModel) + "\r\n\r\n");
		}
		
		previewText.setText(previewStr.toString());

	}

	private void createEvent() {
		addButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				addButtonEvent();
			}
		});

		delButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				delButtonEvent();
			}
		});

		upButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				moveButtonEvent(true);
			}
		});

		downButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				moveButtonEvent(false);
			}
		});

		copButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				copButtonEvent();
			}
		});

		pasButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				pasButtonEvent();
			}
		});

		cutButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				cutButtonEvent();
			}
		});

		columnTableViewer.addDoubleClickListener(new IDoubleClickListener() {
			@Override
			public void doubleClick(DoubleClickEvent event) {
				openColumnDialog();
			}
		});

		folder.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (folder.getSelection() == previewItem) {
					initPreviewData();
				}
				super.widgetSelected(e);
			}
		});

		columnTable.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if ((e.stateMask & SWT.CTRL) != 0 && e.keyCode == (int) 'c') {
					copButtonEvent();
				} else if ((e.stateMask & SWT.CTRL) != 0
						&& e.keyCode == (int) 'v') {
					pasButtonEvent();
				} else if ((e.stateMask & SWT.CTRL) != 0
						&& e.keyCode == (int) 'x') {
					cutButtonEvent();

					// 删除键（Del）
				} else if (e.keyCode == 127) {
					delButtonEvent();

				} else if ((e.stateMask & SWT.CTRL) != 0
						&& e.keyCode == (int) 'n') {
					addButtonEvent();
				}

			}
		});

		columnTable.addMouseListener(new MouseListener() {
			@Override
			public void mouseUp(MouseEvent e) {
			}
			
			@Override
			public void mouseDown(MouseEvent e) {
			}
			
			@Override
			public void mouseDoubleClick(MouseEvent e) {
			}
		});
		
		addModelLabelButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				addModelLabelEvent();
			}
		});

		removeModelLabelButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				removeModelLabelEvent();
			}
		});
		
		nameText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				checkData();
			}
		});
		
		descText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				checkData();
			}
		});

		// columnTable.addSelectionListener(new SelectionAdapter() {
		// @Override
		// public void widgetSelected(SelectionEvent e) {
		// TableItem[] tableItems = columnTable.getItems();
		// List<TableItem> itemList = Arrays.asList(columnTable.getSelection());
		//
		// for(TableItem tableItem : tableItems){
		// if(itemList != null && itemList.contains(tableItem)) {
		// tableItem.setBackground(ColorConstants.black);
		// tableItem.setForeground(ColorConstants.white);
		// } else {
		// tableItem.setBackground(ColorConstants.white);
		// tableItem.setForeground(ColorConstants.black);
		// }
		// }
		//
		// columnTable.redraw();
		// }
		// });
	}

	/**
	 * 移除模块的标签
	 */
	protected void removeModelLabelEvent() {
		IStructuredSelection select = (IStructuredSelection) modelLabelListViewer
				.getSelection();

		if (select.isEmpty()) {
			return;
		}
		List<String> labelList = (List<String>) modelLabelListViewer.getInput();
		labelList.removeAll(select.toList());
		modelLabelListViewer.setInput(labelList);
	}

	/**
	 * 添加一个新的模块标签
	 */
	protected void addModelLabelEvent() {
		List<String> labelList = (List<String>) modelLabelListViewer.getInput();
		String newLabel = modelLabelText.getText().trim();
		if (labelList.contains(newLabel)) {
			MessageDialog.openWarning(getShell(),
					I18nUtil.getMessage("MESSAGE"), "已存在该标签！");

		} else if (!"".equals(newLabel)) {
			labelList.add(newLabel);
			modelLabelListViewer.setInput(labelList);
		}
	}

	/**
	 * 打开Column属性对话框
	 */
	protected void openColumnDialog() {
		IStructuredSelection select = (IStructuredSelection) columnTableViewer
				.getSelection();
		if (select.isEmpty()) {
			return;
		}

		ColumnModel columnModel = (ColumnModel) select.getFirstElement();
		ColumnPropertiesDialog dialog = new ColumnPropertiesDialog(getShell());
		dialog.setColumnModel(columnModel);
		dialog.open();

		if(getShell() != null && !getShell().isDisposed()) {
			columnTableViewer.refresh();
		}
	}

	/**
	 * 剪切按钮事件
	 */
	protected void cutButtonEvent() {
		copButtonEvent();

		List<ColumnModel> modelList = getTableSelection();
		
		columnModelList.removeAll(modelList);
		columnTableViewer.setInput(columnModelList);
		
		
		// 关闭相关的对话框
		for(ColumnModel columnModel : modelList) {
			ColumnPropertiesDialog dialog = ColumnPropertiesDialog.getColumnDialogMap().get(columnModel.getId());
			if(dialog != null) {
				dialog.close();
			}
		}
	}

	/**
	 * 粘贴按钮事件
	 */
	protected void pasButtonEvent() {
		Clipboard clipboard = new Clipboard(getShell().getDisplay());

		Object obj = clipboard.getContents(ColumnModelTransfer.getInstance());
		if (obj == null) {
			return;
		}

		if (obj instanceof ColumnModel[]) {
			addCopyColumnModel((ColumnModel[]) obj);
		}

		clipboard.dispose();
	}

	/**
	 * 粘贴或拖拽操作时添加列模型调用的函数
	 * 
	 * @param modelList
	 */
	public void addCopyColumnModel(ColumnModel[] modelList) {
		if (modelList == null || modelList.length == 0) {
			return;
		}

		for (ColumnModel columnModel : modelList) {
			// 如果发现有列名重复，则需要修改其列名
			if (columnModelList.contains(columnModel)) {
				// 记住原来的名字
				String oldName = columnModel.getColumnName();
				int num = 1;
				while (true) {
					columnModel.setColumnName(oldName + "_" + num);
					if (columnModelList.contains(columnModel)) {
						num++;
					} else {
						break;
					}
				}
			}

			columnModel.setParentTableColumnId(null);
			columnModel.setPrimaryKey(false);

			columnModel.setTableModel(cloneTableModel);
			columnModelList.add(columnModel);
		}

		columnTableViewer.setInput(columnModelList);
	}

	/**
	 * 移动列模型到某个TableItem下方
	 * 
	 * @param modelList
	 */
	public void moveColumnModelListTo(ColumnModel[] models, TableItem item) {
		if (models == null || models.length == 0 || item == null) {
			return;
		}

		// 要移动到哪一行以下
		int selectNum = item.getParent().indexOf(item);
		ColumnModel insertModel = columnModelList.get(selectNum); // 要插入到该对象下面

		Map<Integer, ColumnModel> sortMap = new HashMap<Integer, ColumnModel>(); // 对上移顺序做个排序，先移动行号小的
		List<ColumnModel> needSortModelList = new ArrayList<ColumnModel>();
		for (ColumnModel model : models) {
			sortMap.put(new Integer(columnModelList.indexOf(model)),
					(ColumnModel) model);
			needSortModelList.add(model);
		}

		columnModelList.removeAll(needSortModelList);
		// 将刚才添加到末尾的那些Model放入到insertModel下方
		int newSelectNum = columnModelList.indexOf(insertModel); // 要插入到该对象下面
		List<ColumnModel> downList = new ArrayList<ColumnModel>(); // 记录要插入对象一下的行
		for (int i = newSelectNum + 1, length = columnModelList.size(); i < length; i++) {
			downList.add(columnModelList.get(i));
		}
		columnModelList.removeAll(downList);

		// 把要插入的按原来行号从小到大放入List末尾
		for (int i = 0, length = columnModelList.size()
				+ needSortModelList.size() + downList.size(); i < length; i++) {
			ColumnModel columnModel = sortMap.get(i);
			if (columnModel != null) {
				columnModelList.add(columnModel);
			}
		}

		columnModelList.addAll(downList);

		columnTableViewer.setInput(columnModelList);
	}

	/**
	 * 复制按钮事件
	 */
	protected void copButtonEvent() {
		List list = getTableSelection();

		if (list == null) {
			return;
		}

		Clipboard clipboard = new Clipboard(getShell().getDisplay());
		clipboard.setContents(
				new Object[] { list.toArray(new ColumnModel[] {}) },
				new Transfer[] { ColumnModelTransfer.getInstance() });

		clipboard.dispose();
	}

	/**
	 * 获取表格所选择的行
	 * 
	 * @return
	 */
	public List<ColumnModel> getTableSelection() {
		IStructuredSelection select = (IStructuredSelection) columnTableViewer
				.getSelection();

		if (select.isEmpty()) {
			return null;
		}

		List<ColumnModel> list = select.toList();

		return list;
	}

	/**
	 * 创建移动按钮事件
	 * 
	 * @param boolean 如果为ture，表示上移，否则表示下移
	 */
	private void moveButtonEvent(boolean isUpMove) {
		List<ColumnModel> list = getTableSelection();
		if (list == null) {
			return;
		}

		Map<Integer, ColumnModel> sortMap = new HashMap<Integer, ColumnModel>(); // 对上移顺序做个排序，先移动行号小的
		for (Object obj : list) {
			sortMap.put(new Integer(columnModelList.indexOf(obj)),
					(ColumnModel) obj);
		}

		if (isUpMove) {
			for (int i = 0; i < columnModelList.size(); i++) {
				Object obj = sortMap.get(new Integer(i));

				if (obj == null) {
					continue;
				} else if (i == 0) {
					// 最小的行号为0，无法上移
					break;
				}

				// 把该元素和前面的元素交换位置
				columnModelList.set(i, columnModelList.get(i - 1));
				columnModelList.set(i - 1, (ColumnModel) obj);
			}
		} else {
			for (int i = columnModelList.size() - 1; i > -1; i--) {
				Object obj = sortMap.get(new Integer(i));

				if (obj == null) {
					continue;
				} else if (i == columnModelList.size() - 1) {
					// 最大的行号为columnModelList.size() - 1，无法下移
					break;
				}

				// 把该元素和前面的元素交换位置
				columnModelList.set(i, columnModelList.get(i + 1));
				columnModelList.set(i + 1, (ColumnModel) obj);
			}
		}

		columnTableViewer.setInput(columnModelList);
		columnTableViewer.setSelection(new StructuredSelection(list));
	}

	/**
	 * 添加新列的按钮事件
	 */
	private void addButtonEvent() {
		ColumnModel columnModel = new ColumnModel();
		String newName = getNewColumnName();
		columnModel.setColumnName(newName);
		columnModel.setColumnDesc(newName);
		columnModel.setDataTypeModel(undefinedDataTypeModel);
		columnModel.setTableModel(cloneTableModel);

		columnModelList.add(columnModel);

		columnTableViewer.setInput(columnModelList);
		columnTableViewer.setSelection(new StructuredSelection(columnModel));

	}

	/**
	 * 删除一列的按钮事件
	 */
	private void delButtonEvent() {
		List<ColumnModel> list = getTableSelection();

		if (list == null) {
			return;
		}

		columnModelList.removeAll(list);
		columnTableViewer.setInput(columnModelList);

		// 关闭相关的对话框
		for(ColumnModel columnModel : list) {
			ColumnPropertiesDialog dialog = ColumnPropertiesDialog.getColumnDialogMap().get(columnModel.getId());
			if(dialog != null) {
				dialog.close();
			}
		}
		
		if (!columnModelList.isEmpty()) {
			columnTableViewer.setSelection(new StructuredSelection(
					columnModelList.get(columnModelList.size() - 1)));
		}
	}

	/**
	 * 添加一个新列式，默认生成的列名称
	 */
	private String getNewColumnName() {
		List<String> nameList = new ArrayList<String>();
		for (ColumnModel columnModel : columnModelList) {
			nameList.add(columnModel.getColumnName());
		}

		int index = columnModelList.size() + 1;
		while (true) {
			if (nameList.contains(DmConstants.COLUMN_PREFIX + index)) {
				index++;
			} else {
				break;
			}
		}

		return DmConstants.COLUMN_PREFIX + index;
	}

	private void initTableItemData() {
		nameText.setText(cloneTableModel.getTableName() == null ? ""
				: cloneTableModel.getTableName());
		descText.setText(cloneTableModel.getTableDesc() == null ? ""
				: cloneTableModel.getTableDesc());
		noteText.setText(cloneTableModel.getTableNote() == null ? ""
				: cloneTableModel.getTableNote());

		modelLabelListViewer.setContentProvider(new ArrayContentProvider());
		String modelLabel = cloneTableModel.getModelLabel();

		List<String> modelLabelList = new ArrayList<String>();
		if (!"".equals(modelLabel.trim())) {
			String[] modelLabels = modelLabel
					.split(DmConstants.TABLE_MODEL_MODELLABEL_SEPARATOR);
			for (String label : modelLabels) {
				modelLabelList.add(label);
			}
		}
		modelLabelListViewer.setInput(modelLabelList);

	}

	private void initColumnItemData() {
		undefinedDataTypeModel = new DataTypeModel();
		undefinedDataTypeModel.setName(DmConstants.UNDEFINED);
		undefinedDataTypeModel.setType(DmConstants.UNDEFINED);

		// 让该表格可以编辑
		String[] columnProperties = new String[] { "num", "name", "desc",
				"type", "length", "precision", "p", "f", "m" };
		columnTableViewer.setColumnProperties(columnProperties);

		// 获取该数据库支持的数据类型
		PhysicalDiagramModel physicalDiagramModel = cloneTableModel
				.getPhysicalDiagramModel();
		if (physicalDiagramModel == null
				|| physicalDiagramModel.getPhysicalDataModel() == null
				|| physicalDiagramModel.getPhysicalDataModel()
						.getDatabaseTypeModel() == null) {
			setErrorMessage("无法找到该表格所属的数据库类型！");
			MessageDialog.openError(getShell(), I18nUtil.getMessage("MESSAGE"),
					"无法找到该表格所属的数据库类型！");
			return;
		}

		dataTypeList.add(undefinedDataTypeModel); // 添加未定义数据类型
		// 添加该数据库所支持的所有数据类型
		dataTypeList.addAll(DatabaseManager
				.getDataTypeList(physicalDiagramModel.getPhysicalDataModel()
						.getDatabaseTypeModel()));
		if (dataTypeList == null || dataTypeList.isEmpty()) {
			setErrorMessage("找不到该数据库所支持的数据类型！");
			MessageDialog.openError(getShell(), I18nUtil.getMessage("MESSAGE"),
					"找不到该数据库所支持的数据类型！");
			return;
		}

		String[] typeNameArray = new String[dataTypeList.size()];
		for (int i = 0; i < dataTypeList.size(); i++) {
			typeNameArray[i] = dataTypeList.get(i).getName();
		}

		CellEditor[] cellEditors = new CellEditor[9];
		cellEditors[0] = new TextCellEditor(columnTable);
		cellEditors[1] = new TextCellEditor(columnTable);
		cellEditors[2] = new TextCellEditor(columnTable);
		cellEditors[3] = new ComboBoxCellEditor(columnTable, typeNameArray);
		// cellEditors[3] = new ComboBoxCellEditor(columnTable, new
		// String[]{"sdfsdf", "sdfdsf"});
		cellEditors[4] = new TextCellEditor(columnTable);
		cellEditors[5] = new TextCellEditor(columnTable);
		cellEditors[6] = new CheckboxCellEditor(columnTable);
		cellEditors[7] = new CheckboxCellEditor(columnTable);
		cellEditors[8] = new CheckboxCellEditor(columnTable);
		columnTableViewer.setCellEditors(cellEditors);

		ICellModifier modifier = new DataTypeCellModify(columnTableViewer, this);
		columnTableViewer.setCellModifier(modifier);

		columnModelList = cloneTableModel.getColumnList();
		columnTableViewer.setContentProvider(new ArrayContentProvider());
		columnTableViewer.setLabelProvider(new TableColumnLabelProvider(
				columnModelList));

		columnTableViewer.setInput(columnModelList);

		// 添加拖放功能
		Transfer[] types = new Transfer[] { ColumnModelTransfer.getInstance() };
		columnTableViewer.addDropSupport(DND.DROP_MOVE, types,
				new ColumnModelDropTargetListener(this));
		columnTableViewer.addDragSupport(DND.DROP_MOVE, types,
				new ColumnModelDrogTargetListener(this));
	}

	@Override
	protected void okPressed() {

		if (!checkData()) {
			return;
		}

		cloneTableModel.setTableName(nameText.getText().trim());
		cloneTableModel.setTableDesc(descText.getText());
		cloneTableModel.setTableNote(noteText.getText());

		List<String> labelList = (List<String>) modelLabelListViewer.getInput();
		StringBuffer labelBuffer = new StringBuffer();
		for (String label : labelList) {
			labelBuffer.append(label
					+ DmConstants.TABLE_MODEL_MODELLABEL_SEPARATOR);
		}

		String label = labelBuffer.substring(0,
				labelBuffer.length() - 1 < 0 ? 0 : labelBuffer.length() - 1);
		cloneTableModel.setModelLabel(label);

		command = new UpdateTableModelCommand();
		command.setNewTableModel(cloneTableModel);
		if (tableGefModel != null) {
			command.setTableGefModel(tableGefModel);
		} else {
			// 如果用户是从数据库上打开的该对话框，则tableGefModel为空
			command.setTableModel(tableModel);
		}

		super.okPressed();
	}

	/**
	 * 检查数据是否填写正确
	 * 
	 * @return
	 */
	private boolean checkData() {
		String str = nameText.getText().trim();
		if ("".equals(str)) {
			setErrorMessage("表格名称不能为空！");
			return false;
		}

		// 同一个物理数据模型下表格必须唯一
		if (tableModel == null) {
			// 表模型为空，无法校验数据！
			setErrorMessage(I18nUtil.getMessage("TABLEMODEL_IS_EMPTY_CAN_NOT_CHECK_DATA"));
			return false;
		}
		
		FileModel fileModel = FileModel.getFileModelFromObj(tableModel);
		if(fileModel == null) {
			// 找不到对应文件模型，无法校验数据！
			setErrorMessage(I18nUtil.getMessage("FILEMODEL_IS_EMPTY_CAN_NOT_CHECK"));
			return false;
		}
		
		List<TableModel> tableModels = fileModel.getAllTableModel();
		for(TableModel tableModel : tableModels) {
			if(!tableModel.equals(this.tableModel) && str.equals(tableModel.getTableName())) {
				setErrorMessage(I18nUtil.getMessage("TABLEMODEL_NAME_IS_ALREADY"));
				return false;
			}
		}

		str = descText.getText().trim();
		if ("".equals(str)) {
			// 表格描述不能为空！
			setErrorMessage(I18nUtil.getMessage("TABLE_DESC_NOT_EMPTY"));
			return false;
		}

		setErrorMessage(null);
		setMessage(I18nUtil.getMessage("TABLEMODEL_ATTRI"));
		return true;
	}
	
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.OK_ID, I18nUtil.getMessage("OK"),
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				I18nUtil.getMessage("CANCEL"), false);
	}

	public void setTableGefModel(TableGefModel tableGefModel) {
		this.tableGefModel = tableGefModel;
		tableModel = tableGefModel.getDataObject();
	}

	public void setTableModel(TableModel tableModel) {
		this.tableModel = tableModel;
	}

	public final List<DataTypeModel> getDataTypeList() {
		return dataTypeList;
	}

	public UpdateTableModelCommand getCommand() {
		return command;
	}

	public List<ColumnModel> getColumnModelList() {
		return columnModelList;
	}

	public static Map<TableModel, TableGefModelDialog> getTableDialogMap() {
		return tableDialogMap;
	}
	
	
}
